
import os
from pathlib import Path
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from stt import STT
from config import TOKEN, STIKER1_TOKEN,  STIKER2_TOKEN
from questions import  base_questions, epit_questions
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import kb
from gigachat_answers import answer1,answer2,answer3, answer4
from BD import DB_bio
from MemoryAPI import upload_bio

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
stt = STT()

DB = DB_bio("biography.db")


"""–°–¥–µ–ª–∞–Ω–æ –Ω–∞ —Å–∫–æ—Ä—É—é —Ä—É–∫—É, –Ω–µ —Å—É–¥–∏—Ç–µ!"""
global preprompt
global Biography
global gen
global doublepromt
doublepromt = ""
gen = []


@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):

    user_name = message.from_user.first_name
    message_text = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç *–û–ª–µ–≥*. –°–≥–µ–Ω–µ—Ä–∏—Ä—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∏ —ç–ø–∏—Ç–∞—Ñ–∏—é –ª—é–±–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Ç–µ–±–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤!"
    await bot.send_sticker(message.chat.id, STIKER1_TOKEN)
    await message.answer(message_text, reply_markup=kb.reply_kb, parse_mode="Markdown")


@dp.message_handler(lambda message: message.text == "üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è")
async def cmd_start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ (–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ)", reply_markup=kb.choose_epitaphy_kb)



"""–¢—É—Ç –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
class BioForm(StatesGroup):
    answering_questions = State()
    editing_biography = State()
    answering_questions_epit = State()
    saving_biography = State()

@dp.message_handler(lambda message: message.text == "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è")
async def process_bio_request(message: types.Message, state: FSMContext):
    await message.answer("*–î–∞–≤–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –±–∞–∑–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤üìÉ*", reply_markup=kb.home_kb, parse_mode="Markdown")
    await BioForm.answering_questions.set()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if base_questions:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –ø—É—Å—Ç
        await message.answer(base_questions[0], parse_mode="Markdown")


"""
–ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""
async def get_answers(state: FSMContext):
    user_data = await state.get_data()
    return user_data.get("answers", [])


@dp.message_handler(state=BioForm.answering_questions)
async def answer_question(message: types.Message, state: FSMContext):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.reply_kb)
    else:
        answers = await get_answers(state)
        answers.append(message.text)
        gen.append(message.text)
        await state.update_data(answers=answers)

        if len(answers) < len(base_questions):
            await message.answer(base_questions[len(answers)], parse_mode="Markdown")
        else:
            global  preprompt
            await state.finish()
            PROMPT = "\n".join([f"{j}: {i}" for j, i in zip(base_questions, answers)])
            await message.answer("‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è*–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é*‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è", parse_mode="Markdown")
            preprompt = answer1(PROMPT)
            await bot.send_sticker(message.chat.id, STIKER2_TOKEN)
            await message.answer("*–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã.* –ü—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ (–º–æ–∂–Ω–æ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üéôÔ∏è) —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –¥–∞–Ω–Ω–æ–º —á–µ–ª–æ–≤–µ–∫–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ. –ú–Ω–µ –Ω—É–∂–Ω—ã –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –µ–≥–æ —Å–µ–º—å–µ, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏, –∫–∞—Ä—å–µ—Ä–µ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∏—Ö –º–Ω–µ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –±–∏–æ–≥—Ä–∞—Ñ–∏–∏.", parse_mode="Markdown")


@dp.message_handler(lambda message: message.text == "–≠–ø–∏—Ç–∞—Ñ–∏—è")
async def process_epitaph_request(message: types.Message, state: FSMContext):
    await state.reset_state()
    await message.answer("*–î–∞–≤–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç–ø–∏—Ç–∞—Ñ–∏–∏üí¨*", reply_markup=kb.home_kb, parse_mode="Markdown")
    await BioForm.answering_questions_epit.set()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if epit_questions:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –ø—É—Å—Ç
        await message.answer(epit_questions[0], parse_mode="Markdown")


@dp.message_handler(state=BioForm.answering_questions_epit)
async def answer_epit_question(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        if "epit_answers" not in data:
            data["epit_answers"] = []

        data["epit_answers"].append(message.text)

        if len(data["epit_answers"]) < len(epit_questions):
            await message.answer(epit_questions[len(data["epit_answers"])], parse_mode="Markdown")
        else:
            await state.finish()
            PROMPT = "\n".join([f"{j}: {i}" for j, i in zip(epit_questions, data["epit_answers"])])
            await message.answer("‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è*–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é*‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è", parse_mode="Markdown")
            doublepromt = answer4(PROMPT)
            #doublepromt = "–ó–¥–µ—Å—å –±—É–¥–µ—Ç —ç–ø–∏—Ç–∞—Ñ–∏—è"
            user = message.from_user.first_name


            await bot.send_sticker(message.chat.id, STIKER2_TOKEN)
            await message.answer(doublepromt, parse_mode="Markdown", reply_markup=kb.choose_bio_kb)





"""–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
@dp.message_handler(lambda message: message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_home(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.reply_kb)



"""–ó–¥–µ—Å—å –∏–¥–µ—Ç —Ä–∞–±–æ—Ç–∞ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–æ–≤—ã—Ö"""
@dp.message_handler(content_types=[
    types.ContentType.VOICE,
    types.ContentType.DOCUMENT,

])
async def voice_message_handler(message: types.Message):

    if message.content_type == types.ContentType.VOICE:
        file_id = message.voice.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_on_disk = Path("", f"{file_id}.tmp")

        await bot.download_file(file_path, destination=file_on_disk)
        await message.reply("–ê—É–¥–∏–æ –ø–æ–ª—É—á–µ–Ω–æ ‚úîÔ∏è")
        await message.answer("‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è*–ì–µ–Ω–µ—Ä–∏—Ä—É—é*‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è", parse_mode="Markdown")
        text = stt.audio_to_text(file_on_disk)
        os.remove(f"{file_id}.tmp")


        Biography = answer2(preprompt,text)
        #Biography = "–†–æ–¥–∏–ª—Å—è –≤—ã–¥–∞—é—â–∏–π—Å—è —Å–æ–≤–µ—Ç—Å–∫–∏–π –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä –î–º–∏—Ç—Ä–∏–π –®–æ—Å—Ç–∞–∫–æ–≤–∏—á –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –≤ –¥–æ–º–µ"
        await message.answer("*–ò—Ç–æ–≥–æ–≤–∞—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è*‚úîÔ∏è Ô∏è", parse_mode="Markdown")
        await message.answer(Biography, reply_markup=kb.correct_kb)

    """–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–æ–≥—Ä–∞—Ñ–∏–∏"""
    @dp.message_handler(lambda message: message.text == "–†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å")
    async def redactor(message: types.Message):
        await message.answer("‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è*–†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é*‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è", parse_mode="Markdown")
        regen_bio = answer3(Biography)
        await message.answer(regen_bio, reply_markup=kb.home_kb, parse_mode="Markdown")

    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏"""
    @dp.message_handler(lambda message: message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å‚öôÔ∏è")
    async def edit_biography(message: types.Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–∏–æ–≥—Ä–∞—Ñ–∏–∏:", reply_markup=kb.home_kb)
        await BioForm.editing_biography.set()

    @dp.message_handler(state=BioForm.editing_biography)
    async def process_edited_biography(message: types.Message, state: FSMContext):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(edited_biography=message.text)
        await message.answer("–ë–∏–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
        await message.answer(message.text)
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∏–æ–≥—Ä–∞—Ñ–∏–∏", reply_markup=kb.save_kb)
        await BioForm.saving_biography.set()

    @dp.message_handler(state=BioForm.saving_biography, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—åüåê")
    async def save(message: types.Message, state: FSMContext):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        edited_biography = user_data.get('edited_biography')
        user = message.from_user.first_name

        if upload_bio(gen[0], gen[1], gen[2], gen[3], gen[4], gen[5], gen[6], gen[7], edited_biography, doublepromt, user):
            await message.answer("–ë–∏–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", reply_markup=kb.home_kb)

        await state.finish()



if __name__ == "__main__":
    # Start the bot
    print("Starting the bot")
    try:
        executor.start_polling(dp, skip_updates=True)
    except (KeyboardInterrupt, SystemExit):
        pass
